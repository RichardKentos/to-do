{"version":3,"sources":["components/Todo.js","components/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","todoElement","clicked","e","target","className","console","log","setIsDone","newTodos","text","filter","item","innerText","setTodos","setFinished","oldArray","textContent","d","Date","getDate","getMonth","getHours","getMinutes","map","tick","onClick","Todolist","todos","isDone","App","enterSubmit","key","addTodo","useEffect","window","addEventListener","removeEventListener","useState","todoInput","setTodoInput","icon","faCheckCircle","JSON","parse","localStorage","getItem","inputValue","setInputValue","finished","setItem","stringify","oldTodo","value","placeholder","onChange","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15b85419.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Todo = (props) => {\r\n    const clicked = (e) => {\r\n        if (e.target.className !== \"through\") {\r\n          e.target.className = \"through\";\r\n          console.log(e);\r\n          props.setIsDone(true);\r\n          const newTodos = props.text.filter((item) => {\r\n            return item !== e.target.innerText\r\n          });\r\n          props.setTodos(newTodos);\r\n          props.setFinished(oldArray => [...oldArray,e.target.textContent])\r\n        }\r\n        else {\r\n          props.setIsDone(false);\r\n          e.target.className = \"\"\r\n        }\r\n      }\r\n  \r\n\r\n    let todoElement;  \r\n    let d = new Date();\r\n    let date = d.getDate();\r\n    let month = d.getMonth();\r\n    let hours = d.getHours();\r\n    let mins = d.getMinutes();\r\n\r\n    \r\n        todoElement = props.text.map( item => {\r\n        // return <li onClick={clicked}>{` ${item} - added ${date}.${month+1}. ${hours}:${mins}`}</li>\r\n        return (\r\n          <>\r\n          {props.tick}\r\n          <li className=\"doneTodos\" onClick={clicked}>{item}</li><br></br>\r\n          </>\r\n        )\r\n        \r\n        \r\n      })\r\n    \r\n\r\n\r\n    return (\r\n      <>\r\n        {todoElement}<br></br>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst Todolist = (props) => {\r\n\r\n    if (props)\r\n\r\n\r\n    return (\r\n        <ul>\r\n            <Todo setFinished={props.setFinished} \r\n                    setIsDone={props.setIsDone} \r\n                    setTodos={props.setTodos} \r\n                    text={props.todos}\r\n                    isDone={props.isDone} />\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Todolist;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Todolist from \"./components/Todolist\";\nimport Todo from \"./components/Todo\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\n\nfunction App() {\nconst changeInput = (e) => {  \n  setTodoInput(e.target.value);\n  setInputValue(e.target.value)\n}\n\nconst enterSubmit = (e) => {\n  if (e.key === \"Enter\") {\n    addTodo()\n  }\n}\n\nuseEffect(() => {\n  window.addEventListener(\"keypress\", enterSubmit)\n  return () => window.removeEventListener(\"keypress\", enterSubmit)\n  \n})\n\n\nconst [todoInput, setTodoInput] = useState(\"\");\nconst tick = <FontAwesomeIcon className=\"doneTodos\" icon={faCheckCircle} />\nconst [isDone, setIsDone] = useState(false);\nlet [todos, setTodos]= useState(JSON.parse(localStorage.getItem(\"todos\")));\nconst [inputValue, setInputValue] = useState()\nlet [finished, setFinished] = useState([]);\n\n\nuseEffect(() => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n}, [todos])\n\n\nconst addTodo = () => {\n  setTodos(oldTodo => [...oldTodo, todoInput]);\n  setInputValue(\"\")\n}\n\nconst delTodos = () => {\n  setTodos([]);\n  setFinished([])\n}\n\n  return (\n    <div>\n      <ul className=\"to-do\">\n        <h1>To do</h1>\n        <div className=\"add\">\n          <input value={inputValue} placeholder=\"What you need to do\" onChange={changeInput} type=\"text\"/>\n          <input onClick={()=> addTodo()} value=\"Add\" type=\"submit\"/>\n          <input onClick={()=> delTodos()} value=\"Delete\" type=\"submit\"/>\n        </div>\n      <Todolist setIsDone={setIsDone} isDone={isDone} setFinished={setFinished} setTodos={setTodos} todos={todos} />\n      </ul>\n    \n      <ul className=\"done\">\n        <h1>Done</h1>\n          {isDone ? <Todo tick={tick} text={finished} /> : null}\n      </ul>\n\n  \n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}